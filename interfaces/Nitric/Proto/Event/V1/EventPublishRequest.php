<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: event/v1/event.proto

namespace Nitric\Proto\Event\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request to publish an event to a topic
 *
 * Generated from protobuf message <code>nitric.event.v1.EventPublishRequest</code>
 */
class EventPublishRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The name of the topic to publish the event to
     *
     * Generated from protobuf field <code>string topic = 1;</code>
     */
    protected $topic = '';
    /**
     * The event to be published
     *
     * Generated from protobuf field <code>.nitric.event.v1.NitricEvent event = 2;</code>
     */
    protected $event = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $topic
     *           The name of the topic to publish the event to
     *     @type \Nitric\Proto\Event\V1\NitricEvent $event
     *           The event to be published
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Event\V1\Event::initOnce();
        parent::__construct($data);
    }

    /**
     * The name of the topic to publish the event to
     *
     * Generated from protobuf field <code>string topic = 1;</code>
     * @return string
     */
    public function getTopic()
    {
        return $this->topic;
    }

    /**
     * The name of the topic to publish the event to
     *
     * Generated from protobuf field <code>string topic = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setTopic($var)
    {
        GPBUtil::checkString($var, True);
        $this->topic = $var;

        return $this;
    }

    /**
     * The event to be published
     *
     * Generated from protobuf field <code>.nitric.event.v1.NitricEvent event = 2;</code>
     * @return \Nitric\Proto\Event\V1\NitricEvent
     */
    public function getEvent()
    {
        return isset($this->event) ? $this->event : null;
    }

    public function hasEvent()
    {
        return isset($this->event);
    }

    public function clearEvent()
    {
        unset($this->event);
    }

    /**
     * The event to be published
     *
     * Generated from protobuf field <code>.nitric.event.v1.NitricEvent event = 2;</code>
     * @param \Nitric\Proto\Event\V1\NitricEvent $var
     * @return $this
     */
    public function setEvent($var)
    {
        GPBUtil::checkMessage($var, \Nitric\Proto\Event\V1\NitricEvent::class);
        $this->event = $var;

        return $this;
    }

}

