<?php

/**
 * Copyright 2021 Nitric Technologies Pty Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Nitric\Api;

use Exception;
use Nitric\Api\Events\TopicRef;
use Nitric\Proto\Event\V1\EventServiceClient;
use Nitric\Proto\Event\V1\NitricTopic;
use Nitric\Proto\Event\V1\TopicListRequest;
use Nitric\Proto\Event\V1\TopicListResponse;
use Nitric\Proto\Event\V1\TopicServiceClient;
use Nitric\ProtoUtils\Utils;

/**
 * Class Events provides a client for the Nitric Event Service.
 *
 * @category Sdk
 * @package Nitric\Api
 * @author   Nitric <maintainers@nitric.io>
 * @license  http://www.opensource.org/licenses/mit-license.html  MIT License
 * @link     https://nitric.io
 */
class Events
{
    /**
     * @var EventServiceClient package private, not for external use.
     */
    public EventServiceClient $_baseEventClient;
    /**
     * @var TopicServiceClient package private, not for external use.
     */
    public TopicServiceClient $_baseTopicClient;

    /**
     * EventClient constructor.
     *
     * @param EventServiceClient|null $eventClient the autogenerated gRPC client object. Typically only injected for mocked testing.
     */
    public function __construct(EventServiceClient $eventClient = null, TopicServiceClient $topicClient = null)
    {
        $connection = Utils::connection();

        if ($eventClient) {
            $this->_baseEventClient = $eventClient;
        } else {
            $this->_baseEventClient = new EventServiceClient($connection['hostname'], $connection['opts']);
        }

        if ($topicClient) {
            $this->_baseTopicClient = $topicClient;
        } else {
            $this->_baseTopicClient = new TopicServiceClient($connection['hostname'], $connection['opts']);
        }
    }

    /**
     * Return a reference to topic.
     *
     * @param  string      $name   the name of the topic
     * @return TopicRef the topic reference
     * @throws Exception
     */
    public function topic(string $name): TopicRef
    {
        return new TopicRef(events: $this, name: $name);
    }

    /**
     * Return a list of topics available for publishing or subscriptions.
     *
     * @return TopicRef[] array of topic names
     * @throws Exception
     */
    public function topics(): array
    {
        [$response, $status] = $this->_baseTopicClient->List(new TopicListRequest())->wait();
        Utils::okOrThrow($status);
        $response = (fn ($r): TopicListResponse => $r)($response);

        $topics = Utils::mapRepeatedField(
            $response->getTopics(),
            fn(NitricTopic $topic) => new TopicRef(events: $this, name: $topic->getName())
        );
        return $topics;
    }
}
