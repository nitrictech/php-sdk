<?php

/**
 * Copyright 2021 Nitric Technologies Pty Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Nitric\Api;

use Nitric\Api\Storage\BucketRef;
use Nitric\Proto\Storage\V1\StorageServiceClient;
use Nitric\ProtoUtils\Utils;

/**
 * Class Storage provides a client for the Nitric Storage Service.
 * @package Nitric\Api
 */
class Storage
{
    /**
     * @var StorageServiceClient package private, not for external use.
     */
    public StorageServiceClient $_baseStorageClient;

    /**
     * StorageClient constructor.
     *
     * @param StorageServiceClient|null $storageClient the autogenerated gRPC client object. Typically only injected for mocked testing.
     */
    public function __construct(StorageServiceClient $storageClient = null)
    {
        if ($storageClient) {
            $this->_baseStorageClient = $storageClient;
        } else {
            $connection = Utils::connection();
            $this->_baseStorageClient = new StorageServiceClient($connection['hostname'], $connection['opts']);
        }
    }

    /**
     * Return a reference to a storage bucket.
     *
     * @param string $name Nitric name of the bucket
     * @return BucketRef a reference which can be used to interact with the bucket.
     */
    public function bucket(string $name)
    {
        return new BucketRef(storage: $this, name: $name);
    }
}
