<?php

/**
 * Copyright 2021 Nitric Technologies Pty Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Nitric\Api;

use Exception;
use Nitric\Proto\Storage\V1\StorageClient as GrpcClient;
use Nitric\Proto\Storage\V1\StorageDeleteRequest;
use Nitric\Proto\Storage\V1\StorageDeleteResponse;
use Nitric\Proto\Storage\V1\StorageReadRequest;
use Nitric\Proto\Storage\V1\StorageReadResponse;
use Nitric\Proto\Storage\V1\StorageWriteRequest;

/**
 * Class StorageClient provides a client for the Nitric Storage Service.
 * @package Nitric\Api
 */
class StorageClient extends AbstractClient
{
    private GrpcClient $client;

    /**
     * StorageClient constructor.
     *
     * @param GrpcClient|null $client the autogenerated gRPC client object. Typically only injected for mocked testing.
     */
    public function __construct(GrpcClient $client = null)
    {
        parent::__construct();
        if ($client) {
            $this->client = $client;
        } else {
            $this->client = new GrpcClient($this->hostname, $this->opts);
        }
    }

    /**
     * Store a file
     *
     * @param  string $bucket Nitric name of the bucket to store the file in.
     * @param  string $key    within the bucket where the file should be stored.
     * @param  string $bytes  byte string containing the file contents to store.
     * @throws Exception
     */
    public function write(string $bucket, string $key, string $bytes)
    {
        $request = new StorageWriteRequest();
        $request->setBucketName($bucket);
        $request->setKey($key);
        $request->setBody($bytes);

        [, $status] = $this->client->Write($request)->wait();
        $this->okOrThrow($status);
    }

    /**
     * @param  string $bucket Nitric name of the bucket where the file is stored.
     * @param  string $key    for the file to retrieve
     * @return string body data as a byte string.
     * @throws Exception
     */
    public function read(string $bucket, string $key): string
    {
        $request = new StorageReadRequest();
        $request->setBucketName($bucket);
        $request->setKey($key);

        [$response, $status] = $this->client->Read($request)->wait();
        $this->okOrThrow($status);
        $response = (fn ($r): StorageReadResponse => $r)($response);

        return $response->getBody();
    }

     /**
     * @param  string $bucket Nitric name of the bucket where the file is stored.
     * @param  string $key    for the file to retrieve
     * @throws Exception
     */
    public function delete(string $bucket, string $key)
    {
        $request = new StorageDeleteRequest();
        $request->setBucketName($bucket);
        $request->setKey($key);

        [$response, $status] = $this->client->Delete($request)->wait();
        $this->okOrThrow($status);
    }
}
